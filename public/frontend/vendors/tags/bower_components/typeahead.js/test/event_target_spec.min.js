describe("EventTarget",function(){var b;beforeEach(function(){utils.mixin(b={},EventTarget)});describe("#on",function(){it("should allow for space separated events",function(){b.on("event1 event2 event3",a);expect(b._callbacks.event1).toBeDefined();expect(b._callbacks.event2).toBeDefined();expect(b._callbacks.event3).toBeDefined()});it("should allow for binding multiple callbacks to same event",function(){b.on("event1",a);b.on("event1",a);b.on("event1",a);expect(b._callbacks.event1.length).toEqual(3)});it("should do nothing if no callback is provided",function(){b.on("event1");expect(b._callbacks).not.toBeDefined()})});describe("#trigger",function(){it("should allow for space separated events",function(){var c=jasmine.createSpy();b.on("event1 event2 event3",c);b.trigger("event1 event2 event3");expect(c.callCount).toEqual(3)});it("should call all callbacks for a given event",function(){var e=jasmine.createSpy(),d=jasmine.createSpy(),c=jasmine.createSpy();b.on("event",e);b.on("event",d);b.on("event",c);b.trigger("event");expect(e).toHaveBeenCalled();expect(d).toHaveBeenCalled();expect(c).toHaveBeenCalled()});it("should invoke callback with event info object",function(){var c=jasmine.createSpy();b.on("event",c);b.trigger("event","i am data");expect(c).toHaveBeenCalledWith({type:"event",data:"i am data"})})});function a(){}});